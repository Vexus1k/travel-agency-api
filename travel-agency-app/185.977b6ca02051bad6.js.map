{"version":3,"file":"185.977b6ca02051bad6.js","mappings":"oSAUO,IAAMA,EAAqB,MAA5B,MAAOA,EAGXC,YACmBC,EACAC,GADAC,oBACAA,oBAEjBA,KAAKC,aAAeD,KAAKD,aAAaG,MAAM,CAC1CC,MAAO,IAAIC,KAAY,GAAI,CAACC,cAAqBA,aACjDC,SAAU,IAAIF,KAAY,GAAI,CAACC,cAC7BA,aAAmB,2EAEzB,CAEOE,WACAP,KAAKC,aAAaO,MAUvBR,KAAKF,aAAaS,SAASP,KAAKC,aAAaQ,MAAMN,MAAOH,KAAKC,aAAaQ,MAAMH,UAThFI,OAAOC,KAAKX,KAAKC,aAAaW,UAAUC,QAAQC,IAC9C,MAAMC,EAAUf,KAAKC,aAAaW,SAASE,GAC3CC,EAAQC,cACRD,EAAQE,wBAAsB,EAOpC,CAEOC,iBAAiBC,GACtB,MAAMJ,EAAUf,KAAKC,aAAaW,SAASO,GAE3C,OAAOJ,EAAQK,SAAWL,EAAQM,KACpC,EAhCWzB,SAAqB,oCAArBA,GAAqB0B,yBAArB1B,EAAqB,sBAArBA,EAAqB2B,qyBCVlCD,iBACEA,eACAA,iBACEA,eACFA,QACAA,gBAAsCA,mBAAOA,QAE7CA,kBAAuDA,mCAAYE,YAAU,GAC3EF,iBACEA,mBAOFA,QACAA,iBACEA,oBAOFA,QACAA,kBAA6B,eACoDA,qBAAQA,UAEzFA,mBAAsC,WAKlCA,+BACFA,qBAlCqEA,wCAM7CA,2CAKtBA,+EASAA,kFAWAA,shBDtBK1B,CAAqB,oIEH5B6B,EAAiB,CACnB,CACEC,KAAM,QACNC,UCAyB,MAAzB,MAAOC,EAGX/B,YACmBC,EACAC,GADAC,oBACAA,oBAEjBA,KAAK6B,UAAY7B,KAAKD,aAAaG,MAAM,CACvCC,MAAO,IAAIC,KAAY,GAAI,CAACC,cAAqBA,aACjDC,SAAU,IAAIF,KAAY,GAAI,CAACC,iBAEnC,CAEOyB,QACA9B,KAAK6B,UAAUrB,MAUpBR,KAAKF,aAAagC,MAAM9B,KAAK6B,UAAUpB,MAAMN,MAAOH,KAAK6B,UAAUpB,MAAMH,UATvEI,OAAOC,KAAKX,KAAK6B,UAAUjB,UAAUC,QAAQC,IAC3C,MAAMC,EAAUf,KAAK6B,UAAUjB,SAASE,GACxCC,EAAQC,cACRD,EAAQE,wBAAsB,EAOpC,CAEOC,iBAAiBC,GACtB,MAAMJ,EAAUf,KAAK6B,UAAUjB,SAASO,GAExC,OAAOJ,EAAQK,SAAWL,EAAQM,KACpC,EA/BWO,SAAkB,oCAAlBA,GAAkBN,yBAAlBM,EAAkB,sBAAlBA,EAAkBL,0xBCV/BD,iBACEA,eACAA,iBACEA,eACFA,QACAA,gBAAsCA,iBAAKA,QAE3CA,kBAAiDA,mCAAYE,SAAO,GAClEF,iBACEA,mBAOFA,QACAA,iBACEA,oBAOFA,QACAA,kBAA6B,eACoDA,kBAAKA,UAEtFA,mBAAsC,WAKlCA,+BACFA,qBAlCmEA,wCAM9CA,wCAKnBA,+EASAA,kFAWAA,6gBDtBKM,CAAkB,MDE3B,CACEF,KAAM,WACNC,UAAW/B,GAEb,CACE8B,KAAM,eACNC,UGV+B,MAA/B,MAAOI,EANblC,cAOkBG,WAAQ,UACRA,UAAO,yDAFZ+B,SAAwB,oCAAxBA,EAAwB,EAAxBA,EAAwB,sBAAxBA,EAAwBR,oPCRrCD,iBAAkD,QAC5CA,SAAWA,QACfA,aAAGA,SAAUA,QACbA,iBAA+C,cAE3CA,+BACFA,mBALEA,wBACDA,uBAEkDA,mSDI1CS,CAAwB,MHYjC,CACEL,KAAM,kBACNC,UKXkC,MAAlC,MAAOK,EAGXnC,YACmBC,EACAC,EACAkC,GAFAjC,oBACAA,oBACAA,iBAEjBA,KAAKkC,mBAAqBlC,KAAKD,aAAaG,MAAM,CAChDC,MAAO,IAAIC,KAAY,GAAI,CAACC,cAAqBA,cAErD,CAEO8B,iBACAnC,KAAKkC,mBAAmB1B,MAU7BR,KAAKF,aAAaqC,eAAenC,KAAKkC,mBAAmBzB,MAAMN,OAT7DO,OAAOC,KAAKX,KAAKkC,mBAAmBtB,UAAUC,QAAQC,IACpD,MAAMC,EAAUf,KAAKkC,mBAAmBtB,SAASE,GACjDC,EAAQC,cACRD,EAAQE,wBAAsB,EAOpC,CAEOC,iBAAiBC,GACtB,MAAMJ,EAAUf,KAAKkC,mBAAmBtB,SAASO,GAEjD,OAAOJ,EAAQK,SAAWL,EAAQM,KACpC,CAEOe,SACLpC,KAAKiC,UAAUI,MACjB,EAnCWL,SAA2B,oCAA3BA,GAA2BV,qCAA3BU,EAA2B,sBAA3BA,EAA2BT,4mBCXxCD,iBAA2D,SACOA,gCAASE,UAAQ,GAAEF,QACnFA,iBACEA,eACFA,QACAA,gBAAsCA,mCAAkBA,QAExDA,kBAAoEA,mCAAYE,kBAAgB,GAC9FF,iBACEA,mBAOFA,QACAA,iBAA6B,eAKzBA,yBACFA,qBAhB+BA,iDAK7BA,6kBDDKU,CAA2B,MLapC,CACEN,KAAM,SACNC,UAAW/B,IAQV,IAAM0C,EAAiB,MAAxB,MAAOA,YAAiB,oCAAjBA,EAAiB,EAAjBA,EAAiB,sBAAjBA,MAAiB,0BAHlBC,cAAsBd,GACtBc,QAECD,CAAiB,KONjBE,EAAU,MAAjB,MAAOA,YAAU,oCAAVA,EAAU,EAAVA,EAAU,sBAAVA,MAAU,0BAPnBC,KAEAF,KACAD,EACAI,QAGSF,CAAU","names":["RegisterPageComponent","constructor","_authService","_formBuilder","this","registerForm","group","email","FormControl","Validators","password","register","valid","value","Object","keys","controls","forEach","controlName","control","markAsDirty","updateValueAndValidity","hasControlErrors","name","invalid","dirty","i0","selectors","ctx","routes","path","component","LoginPageComponent","loginForm","login","VerifyEmailPageComponent","ForgotPasswordPageComponent","_location","forgotPasswordForm","forgotPassword","goBack","back","AuthRoutingModule","RouterModule","AuthModule","CommonModule","ReactiveFormsModule"],"sourceRoot":"webpack:///","sources":["./src/app/auth/pages/register-page/register-page.component.ts","./src/app/auth/pages/register-page/register-page.component.html","./src/app/auth/auth-routing.module.ts","./src/app/auth/pages/login-page/login-page.component.ts","./src/app/auth/pages/login-page/login-page.component.html","./src/app/auth/pages/verify-email-page/verify-email-page.component.ts","./src/app/auth/pages/verify-email-page/verify-email-page.component.html","./src/app/auth/pages/forgot-password-page/forgot-password-page.component.ts","./src/app/auth/pages/forgot-password-page/forgot-password-page.component.html","./src/app/auth/auth.module.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { AuthService } from \"../../core/services/AuthService\";\nimport { FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\n\n@Component({\n  selector: 'app-register-page',\n  templateUrl: './register-page.component.html',\n  styleUrls: ['./register-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RegisterPageComponent {\n  public registerForm: FormGroup;\n\n  constructor(\n    private readonly _authService: AuthService,\n    private readonly _formBuilder: FormBuilder,\n  ) {\n    this.registerForm = this._formBuilder.group({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required,\n        Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/)])\n    });\n  }\n\n  public register(): void {\n    if (!this.registerForm.valid) {\n      Object.keys(this.registerForm.controls).forEach(controlName => {\n        const control = this.registerForm.controls[controlName];\n        control.markAsDirty();\n        control.updateValueAndValidity();\n      });\n\n      return;\n    }\n\n    this._authService.register(this.registerForm.value.email, this.registerForm.value.password);\n  }\n\n  public hasControlErrors(name: string): boolean {\n    const control = this.registerForm.controls[name];\n\n    return control.invalid && control.dirty;\n  }\n}\n","<div class=\"register-wrapper position-relative p-5\">\n  <i class=\"ri-user-shared-2-line position-absolute fs-2 icon-login-route\" [routerLink]=\"['/auth/login']\"></i>\n  <div class=\"icon d-flex align-items-center justify-content-center mx-auto mb-2\">\n    <i class=\"ri-user-line fs-2 text-white\"></i>\n  </div>\n  <h2 class=\"text-center fw-light mb-4\">Sign up</h2>\n\n  <form class=\"register-form\" [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n    <div class=\"form-group mb-3\">\n      <input\n        formControlName=\"email\"\n        type=\"email\"\n        class=\"form-control {{ hasControlErrors('email') ? 'is-invalid' : '' }}\"\n        placeholder=\"Email\"\n        required\n      >\n    </div>\n    <div class=\"form-group mb-3\">\n      <input\n        formControlName=\"password\"\n        type=\"password\"\n        class=\"form-control {{ hasControlErrors('password') ? 'is-invalid' : '' }}\"\n        placeholder=\"Password\"\n        required\n      >\n    </div>\n    <div class=\"form-group mb-3\">\n      <button type=\"submit\" class=\"form-control btn btn-primary rounded submit px-3\">Register</button>\n    </div>\n    <div class=\"form-group mb-3 text-end\">\n      <a\n        class=\"text-decoration-underline form-control-color\"\n        [routerLink]=\"['/auth/forgot-password']\"\n      >\n        Forgot Password?\n      </a>\n    </div>\n  </form>\n</div>\n","import { RouterModule, Routes } from \"@angular/router\";\nimport { NgModule } from \"@angular/core\";\nimport { RegisterPageComponent } from \"./pages/register-page/register-page.component\";\nimport { LoginPageComponent } from \"./pages/login-page/login-page.component\";\nimport { VerifyEmailPageComponent } from \"./pages/verify-email-page/verify-email-page.component\";\nimport { ForgotPasswordPageComponent } from \"./pages/forgot-password-page/forgot-password-page.component\";\n\nconst routes: Routes = [\n    {\n      path: 'login',\n      component: LoginPageComponent,\n    },\n    {\n      path: 'register',\n      component: RegisterPageComponent\n    },\n    {\n      path: 'verify-email',\n      component: VerifyEmailPageComponent\n    },\n    {\n      path: 'forgot-password',\n      component: ForgotPasswordPageComponent\n    },\n    {\n      path: 'logout',\n      component: RegisterPageComponent\n    }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { AuthService } from \"../../core/services/AuthService\";\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LoginPageComponent {\n  public loginForm: FormGroup;\n\n  constructor(\n    private readonly _authService: AuthService,\n    private readonly _formBuilder: FormBuilder,\n  ) {\n    this.loginForm = this._formBuilder.group({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required])\n    });\n  }\n\n  public login(): void {\n    if (!this.loginForm.valid) {\n      Object.keys(this.loginForm.controls).forEach(controlName => {\n        const control = this.loginForm.controls[controlName];\n        control.markAsDirty();\n        control.updateValueAndValidity();\n      });\n\n      return;\n    }\n\n    this._authService.login(this.loginForm.value.email, this.loginForm.value.password);\n  }\n\n  public hasControlErrors(name: string): boolean {\n    const control = this.loginForm.controls[name];\n\n    return control.invalid && control.dirty;\n  }\n}\n","<div class=\"login-wrapper position-relative p-5\">\n  <i class=\"ri-user-add-line position-absolute icon-register-route fs-2\" [routerLink]=\"['/auth/register']\"></i>\n  <div class=\"icon d-flex align-items-center justify-content-center mx-auto mb-2\">\n    <i class=\"ri-user-line fs-2 text-white\"></i>\n  </div>\n  <h2 class=\"text-center fw-light mb-4\">Login</h2>\n\n  <form class=\"login-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n    <div class=\"form-group mb-3\">\n      <input\n        formControlName=\"email\"\n        type=\"email\"\n        class=\"form-control {{ hasControlErrors('email') ? 'is-invalid' : '' }}\"\n        placeholder=\"Email\"\n        required\n      >\n    </div>\n    <div class=\"form-group mb-3\">\n      <input\n        formControlName=\"password\"\n        type=\"password\"\n        class=\"form-control {{ hasControlErrors('password') ? 'is-invalid' : '' }}\"\n        placeholder=\"Password\"\n        required\n      >\n    </div>\n    <div class=\"form-group mb-3\">\n      <button type=\"submit\" class=\"form-control btn btn-primary rounded submit px-3\">Login</button>\n    </div>\n    <div class=\"form-group mb-3 text-end\">\n      <a\n        class=\"text-decoration-underline form-control-color\"\n        [routerLink]=\"['/auth/forgot-password']\"\n      >\n        Forgot Password?\n      </a>\n    </div>\n  </form>\n</div>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'app-verify-email-page',\n  templateUrl: './verify-email-page.component.html',\n  styleUrls: ['./verify-email-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class VerifyEmailPageComponent {\n  public readonly title = 'Welcome';\n  public readonly text = 'Link was set to your email address. ' +\n    'Please verify it.';\n}\n","<div class=\"verify-wrapper position-relative p-5\">\n  <h2>{{ title }}</h2>\n  <p>{{ text }}</p>\n  <div class=\"col-12 justify-content-end d-flex\">\n    <button type=\"button\" class=\"btn btn-primary fs-6\" [routerLink]=\"['/auth/login']\">\n      Back to the login\n    </button>\n  </div>\n</div>\n\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { AuthService } from \"../../core/services/AuthService\";\nimport { FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Location } from \"@angular/common\";\n\n@Component({\n  selector: 'app-forgot-password-page',\n  templateUrl: './forgot-password-page.component.html',\n  styleUrls: ['./forgot-password-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ForgotPasswordPageComponent {\n  public forgotPasswordForm: FormGroup;\n\n  constructor(\n    private readonly _authService: AuthService,\n    private readonly _formBuilder: FormBuilder,\n    private readonly _location: Location\n  ) {\n    this.forgotPasswordForm = this._formBuilder.group({\n      email: new FormControl('', [Validators.required, Validators.email])\n    });\n  }\n\n  public forgotPassword(): void {\n    if (!this.forgotPasswordForm.valid) {\n      Object.keys(this.forgotPasswordForm.controls).forEach(controlName => {\n        const control = this.forgotPasswordForm.controls[controlName];\n        control.markAsDirty();\n        control.updateValueAndValidity();\n      });\n\n      return;\n    }\n\n    this._authService.forgotPassword(this.forgotPasswordForm.value.email);\n  }\n\n  public hasControlErrors(name: string): boolean {\n    const control = this.forgotPasswordForm.controls[name];\n\n    return control.invalid && control.dirty;\n  }\n\n  public goBack(): void {\n    this._location.back();\n  }\n}\n","<div class=\"forgot-password-wrapper position-relative p-5\">\n  <i class=\"ri-arrow-left-line position-absolute arrow-back fs-2\" (click)=\"goBack()\"></i>\n  <div class=\"icon d-flex align-items-center justify-content-center mx-auto mb-2\">\n    <i class=\"ri-mail-line fs-2 text-white\"></i>\n  </div>\n  <h2 class=\"text-center fw-light mb-4\">Odzyskiwanie hasła</h2>\n\n  <form class=\"forgot-password-form\" [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"forgotPassword()\">\n    <div class=\"form-group mb-3\">\n      <input\n        formControlName=\"email\"\n        type=\"email\"\n        class=\"form-control {{ hasControlErrors('email') ? 'is-invalid' : '' }}\"\n        placeholder=\"Email\"\n        required\n      >\n    </div>\n    <div class=\"form-group mb-3\">\n      <button\n        type=\"submit\"\n        class=\"form-control btn btn-primary rounded submit px-3\"\n      >\n        Send email\n      </button>\n    </div>\n  </form>\n</div>\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RegisterPageComponent } from './pages/register-page/register-page.component';\nimport { LoginPageComponent } from './pages/login-page/login-page.component';\nimport { BaseAuthLayoutComponent } from './layouts/base-auth-layout/base-auth-layout.component';\nimport { RouterModule, RouterOutlet } from \"@angular/router\";\nimport { AuthRoutingModule } from \"./auth-routing.module\";\nimport { VerifyEmailPageComponent } from './pages/verify-email-page/verify-email-page.component';\nimport { ForgotPasswordPageComponent } from './pages/forgot-password-page/forgot-password-page.component';\nimport { ReactiveFormsModule } from \"@angular/forms\";\n\n\n@NgModule({\n  declarations: [\n    RegisterPageComponent,\n    LoginPageComponent,\n    BaseAuthLayoutComponent,\n    VerifyEmailPageComponent,\n    ForgotPasswordPageComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterOutlet,\n    RouterModule,\n    AuthRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class AuthModule { }\n"],"x_google_ignoreList":[]}